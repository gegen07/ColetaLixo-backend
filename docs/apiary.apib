FORMAT: 1A
HOST: http://polls.apiblueprint.org/api/v1

# collectAPI

collectAPI is a simple API that have a purpose of facilitate the communication between 
station and company that buys recycle dump.

# Group Auth
## User-Register [/register]
### Register [POST]
+ Request (application/json)

    + Attributes
        
        + name: yourName (required)
        + address: yourAddress (required)
        + telephone: +5587541265 (required)
        + email: email@example.com (required)
        + password: password (required)
        + role: company|station (required)

+ Response 200 (application/json)

        {
            "message"=> "Thanks for signing up!"
        }

+ Response 400 (application/json)

        {
            "message"=> 
            {
                "name":["error_message"],
                "email":["error_message"],
                "address":["error_message"],
                "telephone":["error_message"]
            }
        }


## User-Login [/login]
### Login [POST]

+ Request (application/json)

    + Attributes
        
        + email: email@example.com(required)
        + password: password (required)


+ Response 200 (application/json)

        {
            "success": true,
            "data": {
                "token": "______"
            }
        }

+ Response 404 (application/json)

        {
            "message": "Email or password is wrong"
        }

## User-Logout [/logout]
### Logout [POST]

+ Request (application/json)

    + Headers

            token: Bearer JWT
    

+ Response 200 (application/json)

        {
            "message"=> "You have successfully logged out."
        }
        
+ Response 500 (application/json)

        {
            "message"=> "Failed to logout, please try again."
        }

# Group Types
## Types Collection [/types]
### Create Types [POST]
+ Request (application/json)
    + Headers

            token: Bearer JWT
    
    + Attributes
        
        + type: type(required)
    
+ Response 200 (application/json)

        {
            "data": {
                "id": 1,
                "type": "plastic"
            }
        }

### List Types [GET]

+ Request
    + Headers

            token: Bearer JWT

+ Response 200 (application/json)

        {
            "data": [
                {
                    "id": 1,
                    "type": "plastic"
                }
            ],
            "meta": {
                "pagination": {
                    "total": 1,
                    "count": 1,
                    "per_page": 12,
                    "current_page": 1,
                    "total_pages": 1,
                    "links": ["previous":"here",
                              "next": "here"]
                }
            }
        }

## Type [/{type_id}]
### Show [GET]

+ Request (application/json)
    + Headers
            
            token: Bearer JWT
    + Parameters
        + type_id (number, required)

+ Response 200 (application/json)
        {
            "data": {
                "id": 1,
                "type": "plastic"
            }
        }

+ Response 404 (application/json)
        {
            "error": {
                "message": "Could not found type",
                "status_code": 404
            }
        }

### Update Types [/{type_id} POST]
+ Request (application/json)
    + Headers

            token: Bearer JWT
    + Attributes
        
        + type: type(required)
    
    + Parameters
        
        + type_id (number, required)
    
+ Response 200 (application/json)

        {
            "data": {
                "id": 1,
                "type": "type"
            }
        }

+ Response 404 (application/json)
        
        {
            "error": {
                "message": "Could not found type",
                "status_code": 404
            }
        }

### Delete Type [/{type_id} DELETE]
+ Request (application/json)
    + Headers

            token: Bearer JWT
    + Attributes
        
        + type: type(required)
    
    + Parameters
        
        + type_id (number, required)
    
+ Response 200 (application/json)

        {
            "data": {
                "id": 1,
                "type": "type"
            }
        }

+ Response 404 (application/json)
        
        {
            "error": {
                "message": "Could not found type",
                "status_code": 404
            }
        }

## Data Structures

## Type(object)
+ id (number)
+ type (string)

## StationSell(object)
+ id (number)
+ price (number)
+ quantity (number)
+ type_id (string)
+ station_id (string)

## CompanyBuy(object)
+ id (number)
+ company_id (string)
+ stationSell_id (string)   

## User (object)
+ id (number)
+ name (string)
+ email (string)
+ telephone (string)
+ address (string)
+ token (string)
